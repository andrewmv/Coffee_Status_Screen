# Coffee Status Screen
# 2025/06 AMV
# 
# Platform: https://www.waveshare.com/wiki/ESP32-C6-LCD-1.47
#
# Pin mappings
# ---
# LCD DIN   GPIO6
# LCD CLK   GPIO7
# LCD CS    GPIO14
# LCD DC    GPIO15
# LCD RST   GPIO21
# Backlight GPIO22
# RGB       GPIO8
# BOOT      GPIO9
#
# Exposed Entities
# ---
# switch.backlight
# light.rgb
#
### Flow Logic ###
# Boot with screen on, effect off, show connecting message
# When HA time stabilizes, show loading message
# When and if brew time stabilizes, turn on screen (once) and show brew time with appropriate effect
# If user turns off screen, leave it off

### Board Setup ###

esphome:
  name: coffee-screen

esp32:
  board: esp32-c6-devkitm-1

preferences:
  flash_write_interval: 10min

wifi:
  ssid: !secret ssid  
  password: !secret wappw

logger:

# Enable Home Assistant API
api:
  password: !secret apipw

ota:
  platform: esphome
  password: !secret apipw

### Implementmation ###

globals:
    # For tracking first-time setup tasks
  - id: fresh_boot
    type: bool
    restore_value: false
    initial_value: 'true'
    # Machine state of the backlight, may differ from user state
  - id: backlight_on
    type: bool
    restore_value: false
    initial_value: 'true'
    # Effect color. 0 = off, 1 = green, 2 = yellow, 3 = red
  - id: defcon
    type: int
    restore_value: false
    initial_value: '0'

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6
  miso_pin: GPIO5

time:
  - platform: homeassistant
    id: ha_time

font:
  - file: "FreeSans.ttf"
    id: header
    size: 40
  - file: "FreeSans.ttf"
    id: clock_font
    size: 80
  - file: "FreeSans.ttf"
    id: console
    size: 30

display:
  - platform: ili9xxx
    model: st7789v
    dimensions:
      width: 172
      offset_width: 34
      height: 320
    dc_pin: GPIO15
    reset_pin: GPIO21
    cs_pin: GPIO14
    invert_colors: true
    rotation: 90Â°
    show_test_card: false
    lambda: |-
      // Define some color constants
      auto black = Color(0, 0, 0);
      auto white = Color(255, 255, 255);
      // First time setup
      if (id(fresh_boot)) {
        id(backlight).turn_on().perform();
        id(backlight_on) = true;
        id(fresh_boot) = false;
      }
      // Ensure values are ready
      if (!id(ha_time).now().is_valid()) {
        it.print(0, 10, id(console), white, TextAlign::TOP_LEFT, "Connecting To", black);
        it.print(0, 12, id(console), white, TextAlign::TOP_LEFT, "Home Assistant...", black);
      }
      // Calculate time difference
      ESPTime now_tm = id(ha_time).now();
      ESPTime brew_tm;
      // if (!ESPTime::strptime("2025-06-24 21:40:00", brew_tm)) {
      if (!ESPTime::strptime(id(brewtime).state, brew_tm)) {
        it.print(0, 10, id(console), white, TextAlign::TOP_LEFT, "Brewtime Unknown", black);
        if (id(backlight_on)) {
          id(backlight).turn_off().perform();
          id(backlight_on) = false;
        }
        if (id(defcon) != 0) {
          id(led).turn_off().perform();
          id(defcon) = 0;
        }
      } else {
        // Note: ESPTime::recalc_timestamp_utc() appears to be broken
        brew_tm.recalc_timestamp_local();  // Needed for .timestamp calls to work correctly
        now_tm.recalc_timestamp_local();   // Needed for .timestamp calls to work correctly
        // Subtracting local times then converting to UTC to get a delta
        ESPTime diff_tm = ESPTime::from_epoch_utc(now_tm.timestamp - brew_tm.timestamp);
        Color dynamic_color;
        if (diff_tm.timestamp < 3600) { // 1 hour
          dynamic_color = Color(0, 255, 0);
          if (id(defcon) != 1) {
            id(led).turn_on().set_rgb(0, 255, 0).set_brightness(1.0).perform();
            id(defcon) = 1;
          }
        } else if (diff_tm.timestamp < 7200) { // 2 hours
          dynamic_color = Color(219, 202, 17);
          if (id(defcon) != 2) {
            id(led).turn_on().set_rgb(219, 202, 17).set_brightness(1.0).perform();
            id(defcon) = 2;
          }
        } else if (diff_tm.timestamp < 18000) { // 5 hours
          dynamic_color = Color(255, 0, 0);
          if (id(defcon) !=3) {
            id(led).turn_on().set_rgb(255, 0, 0).set_brightness(1.0).perform();
            id(defcon) = 3;
          }
        } else {
          it.print(0, 10, id(console), white, TextAlign::TOP_LEFT, "No Recent Brew :(", black);
          if (id(backlight_on)) {
            id(backlight).turn_off().perform();
            id(backlight_on) = false;
          }
          if (id(defcon) != 0) {
            id(led).turn_off().perform();
            id(defcon) = 0;
          }
          return;
        }
        // Update display
        if (!id(backlight_on)) {
          id(backlight).turn_on().perform();
          id(backlight_on) = true;
        }
        // it.strftime(0, 10, id(sans), white, black, TextAlign::TOP_LEFT, "%H:%M.%S", now_tm);
        // it.strftime(0, 60, id(sans), white, black, TextAlign::TOP_LEFT, "%H:%M.%S", brew_tm);
        it.print(0, 10, id(header), white, TextAlign::TOP_LEFT, "Time since brew:", black);
        it.strftime(0, 60, id(clock_font), dynamic_color, black, TextAlign::TOP_LEFT, "%H:%M.%S", diff_tm);
        // ESP_LOGW("main", "Current timestamp %d", now_tm.timestamp);
        // ESP_LOGW("main", "Brew timestamp %d", brew_tm.timestamp);
        // ESP_LOGW("main", "Diff timestamp %d", diff_tm.timestamp);
      }

# We calculate this on our own
# sensor:
#   - platform: homeassistant
#     id: coffee_is_fresh
#     entity_id: sensor.coffee_is_fresh
    
text_sensor:
  - platform: homeassistant
    id: brewtime
    entity_id: sensor.last_brew_end_time

# Define a PWM output for the backlight
output:
  - platform: ledc
    pin: GPIO22
    id: backlight_pwm

light:
# Define a monochromatic, dimmable light for the backlight
  - platform: monochromatic
    output: backlight_pwm
    name: "Backlight"
    id: backlight
    restore_mode: RESTORE_AND_ON
# Ground effects LED control (different from LCD backlight)
  - platform: esp32_rmt_led_strip
    name: Effect LED
    id: led
    chipset: WS2812
    pin: GPIO8
    num_leds: 1
    rgb_order: RGB

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO9
      mode:
        input: true
        pullup: true
      inverted: true
    id: boot_button
    internal: true
    on_press:
      if:
        condition:
          light.is_on: backlight
        then:
          - light.turn_off: backlight
          - light.turn_off: led 
        else:
          - light.turn_on: backlight
          - if:
              condition:
                lambda: |-
                  return id(defcon) != 0;
              then:
                - light.turn_on: led


